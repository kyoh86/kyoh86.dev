<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kyoh86.work</title>
    <link>https://kyoh86.work/</link>
    <description>Recent content on kyoh86.work</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 05 May 2018 18:21:09 +0900</lastBuildDate>
    
	<atom:link href="https://kyoh86.work/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>自動タグ付け機能でも作ってみる - 6: Wikipediaの出力を形態素解析してみる</title>
      <link>https://kyoh86.work/posts/auto-tagger-6/</link>
      <pubDate>Sat, 05 May 2018 18:21:09 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/auto-tagger-6/</guid>
      <description>前提 先の構成図 参照。 MorphoAnalyzerはできたので、Wikipediaの記事をパースしてみる。 準備 WikiExtractor を使うと、 Wikipediaか</description>
    </item>
    
    <item>
      <title>自動タグ付け機能でも作ってみる - 5: MorphoAnalyzer を作り切る</title>
      <link>https://kyoh86.work/posts/auto-tagger-5/</link>
      <pubDate>Fri, 04 May 2018 15:03:02 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/auto-tagger-5/</guid>
      <description>前提 先の構成図 参照。 前の記事で実験したとおり、PythonからMeCabを呼び出して形態素の分割と品詞の種別までは取得できるようになった。 周</description>
    </item>
    
    <item>
      <title>自動タグ付け機能でも作ってみる - 4: MeCab &#43; Python を試してみる</title>
      <link>https://kyoh86.work/posts/auto-tagger-4/</link>
      <pubDate>Fri, 04 May 2018 14:01:18 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/auto-tagger-4/</guid>
      <description>前提 まずは、形態素解析を使って文章→単語（形態素）の分割部分を作る。 先の構成図で言うところの、 MorphoAnalyzer である。 インストール MeCabのインストール</description>
    </item>
    
    <item>
      <title>自動タグ付け機能でも作ってみる - 3 : Wikipediaによる事前単語重み付けを考える</title>
      <link>https://kyoh86.work/posts/auto-tagger-3/</link>
      <pubDate>Tue, 01 May 2018 23:04:20 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/auto-tagger-3/</guid>
      <description>ところで そもそもの前提として、このブログは記事がとても少ない。 記事が少ないために、検索のための単語重み付けをしたところで、ベースとなる文章が</description>
    </item>
    
    <item>
      <title>自動タグ付け機能でも作ってみる - 2 : 要件詰め</title>
      <link>https://kyoh86.work/posts/auto-tagger-2/</link>
      <pubDate>Mon, 30 Apr 2018 14:19:20 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/auto-tagger-2/</guid>
      <description>要件 自動タグ付けをするにあたって、今回はこのサイト構築に使っている Hugo を前提としたものとしたい。 したがって、Markdownをインプットとする</description>
    </item>
    
    <item>
      <title>自動タグ付け機能でも作ってみる - 1</title>
      <link>https://kyoh86.work/posts/auto-tagger-1/</link>
      <pubDate>Sat, 28 Apr 2018 00:05:33 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/auto-tagger-1/</guid>
      <description>動機づけ ふと、最近自然言語処理なんてやってないし何か良いテーマはないだろうか、と考えてみたところ、 このブログを始めるにあたって、「最も面倒く</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://kyoh86.work/about/</link>
      <pubDate>Sun, 22 Apr 2018 17:39:06 +0900</pubDate>
      
      <guid>https://kyoh86.work/about/</guid>
      <description>自己紹介 ハンドルネーム: kyoh86 名前: 山田恭一朗 趣味: プログラミング、料理、野鳥撮影 好きなもの: 漫画、アニメ、鳥 お仕事: SE → iOSアプリ開発 -&amp;gt; We</description>
    </item>
    
    <item>
      <title>golangのstrings.TrimLeftはイケてない</title>
      <link>https://kyoh86.work/posts/2018-03-25_12-05-01/</link>
      <pubDate>Sun, 25 Mar 2018 12:05:01 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2018-03-25_12-05-01/</guid>
      <description>ツイートしたりもしたけど、やはり気になるのでつらつらとポエムる。 strings.TrimLeftわかりづらくね？ golangのstrings</description>
    </item>
    
    <item>
      <title>【作りたいもの】golangでLCSVパーサ</title>
      <link>https://kyoh86.work/posts/2018-03-03_11-37-00/</link>
      <pubDate>Sat, 03 Mar 2018 11:37:00 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2018-03-03_11-37-00/</guid>
      <description>メモ LCSV (Labeled-CSV) のパーサがほしい できればstruct tagのパースできるやつ 使い方は2種類あって、CSVパーサみたいに各行パースするやつと、JSON</description>
    </item>
    
    <item>
      <title>Goの俺的scaffoldはこれだ！2017年版</title>
      <link>https://kyoh86.work/posts/2017-12-10_13-13-49/</link>
      <pubDate>Sun, 10 Dec 2017 13:13:49 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2017-12-10_13-13-49/</guid>
      <description>Boom Boom Hello, gophers! Go書いてるかい！ tl;dr 今年も色々、汚物に似た何かをGitHub上に吐き散らかしてきましたが、 来年はもうちょっとキレイな汚物にしようと考</description>
    </item>
    
    <item>
      <title>GitHubでセマンティックバージョニングを運用する</title>
      <link>https://kyoh86.work/posts/2017-12-08_00-00-21/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:21 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2017-12-08_00-00-21/</guid>
      <description>tl;dr ちょうど dep (golang用のvendoringツール）を使っている中で、妙なバージョン運用をしているリポジトリに悩まされたので、 いまさらと</description>
    </item>
    
    <item>
      <title>$GOPATH/binにいるバイナリ群の出自を探る方法</title>
      <link>https://kyoh86.work/posts/2017-08-29_10-55-31/</link>
      <pubDate>Tue, 29 Aug 2017 10:55:31 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2017-08-29_10-55-31/</guid>
      <description>Goを使っていると、ある日突然に日頃使っていたコマンドが全く違う何かに置き換えられていたりして、驚くことがあります。 $GOPATH/bin の下に色々入ってはいる</description>
    </item>
    
    <item>
      <title>Visual Studio Codeでバックスペースに悩まされたら</title>
      <link>https://kyoh86.work/posts/2017-06-20_19-42-46/</link>
      <pubDate>Tue, 20 Jun 2017 19:42:46 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2017-06-20_19-42-46/</guid>
      <description>TL;DR VSCodeで日本語入力マジ鬼門 VSCode側では対応予定ないみたい pre-commit hookでもって、せめてコードには残らないようにしてやろう 対象読者 or</description>
    </item>
    
    <item>
      <title>golangのループ変数の使い方をチェックするlinter作ってみた</title>
      <link>https://kyoh86.work/posts/2017-04-11_06-48-23/</link>
      <pubDate>Tue, 11 Apr 2017 06:48:23 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2017-04-11_06-48-23/</guid>
      <description>動機 golangでforループを回すと、中でうっかりクロージャやリファレンスを取れません。 package example import &amp;#34;fmt&amp;#34; func readme() { values := []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} var funcs []func() for _, val := range values { funcs = append(funcs,</description>
    </item>
    
    <item>
      <title>今更ながらJSON Schema Core draft 4.0を日本語訳してみた</title>
      <link>https://kyoh86.work/posts/2017-01-22_23-02-52/</link>
      <pubDate>Sun, 22 Jan 2017 23:02:52 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2017-01-22_23-02-52/</guid>
      <description>JSON SchemaのRFCを読むのが苦痛すぎるので、日本語訳をしてみる。 当翻訳文書上の注意 著作権は原文書に帰属します。 訳者の注についてはカッコ付</description>
    </item>
    
    <item>
      <title>go testの出力を見やすくするツール作ったった</title>
      <link>https://kyoh86.work/posts/2017-01-15_01-15-03/</link>
      <pubDate>Sun, 15 Jan 2017 01:15:03 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2017-01-15_01-15-03/</guid>
      <description>go test してますか。 標準テストライブラリの出力を見やすくするツール richgo を作ったので、紹介をば。 TL;DR Goには公式でリッチなテストフレームワークがないで</description>
    </item>
    
    <item>
      <title>【メモ】作りたいモノリスト</title>
      <link>https://kyoh86.work/posts/2016-12-12_12-25-45/</link>
      <pubDate>Mon, 12 Dec 2016 12:25:45 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-12-12_12-25-45/</guid>
      <description>誰か作ってくれないかなぁ、でも最近、何も作ってないし何か作りたいなあと思っているもののリスト。 随時更新予定。 ATOM-fuzzy-finde</description>
    </item>
    
    <item>
      <title>zshの便利設定2016</title>
      <link>https://kyoh86.work/posts/2016-12-12_00-52-12/</link>
      <pubDate>Mon, 12 Dec 2016 00:52:12 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-12-12_00-52-12/</guid>
      <description>こんばんわ。WACULのプログラマー、 @kyoh86 です。 このエントリはWACUL Advent Calendar 2016の12日目の記事です。 年末といえば大掃除ですね。 押入れ、ト</description>
    </item>
    
    <item>
      <title>GitHubで自動生成コードをDiffに表示しない方法</title>
      <link>https://kyoh86.work/posts/2016-12-07_03-06-32/</link>
      <pubDate>Wed, 07 Dec 2016 03:06:32 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-12-07_03-06-32/</guid>
      <description>結論 ここに書いてある https://github.com/github/linguist/blob/master/lib/linguist/generated.rb 注意事項 だいぶ懐かしい記事ですが…突然、「Diffに表示しないなんてGitHubの価値を損なうものだから記事を非公開に</description>
    </item>
    
    <item>
      <title>ズボラな僕らだからこそ「正しそうで正しくない少し正しいgitの使い方」</title>
      <link>https://kyoh86.work/posts/2016-12-02_00-01-28/</link>
      <pubDate>Fri, 02 Dec 2016 00:01:28 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-12-02_00-01-28/</guid>
      <description>本日のいまさら記事はこちらです。 この記事の対象読者 commit messageは wip fix が9割を超える 「宇宙人」と書いて「マメな人」と読む 夏休みの宿題を9/</description>
    </item>
    
    <item>
      <title>goのinterfaceのstub生成する君</title>
      <link>https://kyoh86.work/posts/2016-10-06_08-48-48/</link>
      <pubDate>Thu, 06 Oct 2016 08:48:48 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-10-06_08-48-48/</guid>
      <description>本題 ATOMのパッケージ作ったよ！（宣伝） 何のために？ GoでDIとかゴニョゴニョしてると、しばしばinterfaceの実装を書くシーンに直面</description>
    </item>
    
    <item>
      <title>【メモ】Node.js? io.js? なんのことです？</title>
      <link>https://kyoh86.work/posts/2016-10-06_08-12-34/</link>
      <pubDate>Thu, 06 Oct 2016 08:12:34 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-10-06_08-12-34/</guid>
      <description>（勝手に）割と衝撃を受けたのでメモ。 元ネタ 知らないうちにMacがシステム標準でJavaScriptで操作できるようになってた (JXA) GoでOSXの</description>
    </item>
    
    <item>
      <title>ECS上のgo製プログラムのプロファイル覗き見る</title>
      <link>https://kyoh86.work/posts/2016-09-14_15-42-22/</link>
      <pubDate>Wed, 14 Sep 2016 15:42:22 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-09-14_15-42-22/</guid>
      <description>SSHトンネリングに必要な情報を得るための手順が多くて忘れるのでメモ。 うっかりsudo忘れる。 前提 goのpprofについては http://blog.livedoor.jp/sonots/archives/39879160.html とか http://qiita.com/ikawaha/items/e3b35f09fb49e9217924 とか参照</description>
    </item>
    
    <item>
      <title>JSON to CSV (for Excel)</title>
      <link>https://kyoh86.work/posts/2016-06-03_11-11-54/</link>
      <pubDate>Fri, 03 Jun 2016 11:11:54 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-06-03_11-11-54/</guid>
      <description>CSV（Character-Separated Values）ってなんだかとってもアレですよね！ 某Excelの場合、Tab区切りのUTF-16</description>
    </item>
    
    <item>
      <title>Perl6でも愛が生まれた</title>
      <link>https://kyoh86.work/posts/2016-05-09_22-33-33/</link>
      <pubDate>Mon, 09 May 2016 22:33:33 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-05-09_22-33-33/</guid>
      <description>say &amp;#34;生&amp;#34;~&amp;amp;&amp;#34;死&amp;#34; 参考 愛が生まれた - Qiita なんで愛が生まれるのか - Qiita</description>
    </item>
    
    <item>
      <title>PHP&#43;postfix with Gmail on El Capitan</title>
      <link>https://kyoh86.work/posts/2016-05-06_23-13-18/</link>
      <pubDate>Fri, 06 May 2016 23:13:18 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-05-06_23-13-18/</guid>
      <description>OSX上でphp -S localhost:8080なんぞして、mb_send_mailなアプリを作ってたんですが、メール送信テストしたくてもまー</description>
    </item>
    
    <item>
      <title>【メモ】mongoDBで環境間のデータに差異が無いか確認する方法</title>
      <link>https://kyoh86.work/posts/2016-04-13_13-10-56/</link>
      <pubDate>Wed, 13 Apr 2016 13:10:56 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-04-13_13-10-56/</guid>
      <description>動機 開発環境とリリース前確認用の環境で、MongoDBのデータに差異が無いか確認しようと思ったけど、 数十万件あるデータを比べるとか無理じゃね</description>
    </item>
    
    <item>
      <title>【メモ】【OSX】peco/fzf でブランチ切替</title>
      <link>https://kyoh86.work/posts/2016-04-06_11-07-31/</link>
      <pubDate>Wed, 06 Apr 2016 11:07:31 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-04-06_11-07-31/</guid>
      <description>git branch -a \ | perl -ne&amp;#39;m|[^/\* ]+$|;next if$_{$&amp;amp;};$_{$&amp;amp;}=1;next if m,^\*|remotes/.+/HEAD,;$s=&amp;#34;\e[0m&amp;lt;S&amp;gt;&amp;#34;;s|.*/([^/]+)/|\e[31m$1$s|; s|^ +([^/]+)$|\e[34mlocal$s$1|;print&amp;#39; \ | column -ts&amp;#39;&amp;lt;S&amp;gt;&amp;#39; \ | fzf --ansi \ | xargs git checkout</description>
    </item>
    
    <item>
      <title>golintと闘いたいけど心の折れてしまった勇者のための隠しダンジョン</title>
      <link>https://kyoh86.work/posts/2016-02-09_01-21-41/</link>
      <pubDate>Tue, 09 Feb 2016 01:21:41 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-02-09_01-21-41/</guid>
      <description>結論 Pull-Request時にCIで差分lintかけるといい感じ。 背景 Goでの開発においては、型付け言語の利点を最大限に活かしたいところで</description>
    </item>
    
    <item>
      <title>Homebrewでインストールしたあいつらを丁寧にアップデートする</title>
      <link>https://kyoh86.work/posts/2016-02-08_14-34-13/</link>
      <pubDate>Mon, 08 Feb 2016 14:34:13 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-02-08_14-34-13/</guid>
      <description>【コメント頂いて書き直しました】 homebrew でパッケージの管理をするのはいいんですが、開発の都合上一部のツールのバージョンを上げられない・・・というシ</description>
    </item>
    
    <item>
      <title>golangでellipsis</title>
      <link>https://kyoh86.work/posts/2016-02-01_11-05-36/</link>
      <pubDate>Mon, 01 Feb 2016 11:05:36 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-02-01_11-05-36/</guid>
      <description>Goで文字の省略処理（Ellipsis）しようとしたら、初歩的なことで躓いたのでメモ程度に。 結論 package main // Ellipsis a text func Ellipsis(length int, text string) string { r := []rune(text) if len(r) &amp;gt; length { return</description>
    </item>
    
    <item>
      <title>Homebrewでインストールしまくったあいつらの正体を知りに行く</title>
      <link>https://kyoh86.work/posts/2016-01-09_09-44-27/</link>
      <pubDate>Sat, 09 Jan 2016 09:44:27 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2016-01-09_09-44-27/</guid>
      <description>結論 brew list | grep -v &amp;#39;^lib&amp;#39; | while read line; do echo -n ${line}$&amp;#39;\t&amp;#39; brew info $line | grep -P &amp;#39;^https?://&amp;#39; | head -n1 done | column -t -s $&amp;#39;\t&amp;#39; &amp;gt; brew-list.txtatk https://library.gnome.org/devel/atk/ autoconf https://www.gnu.org/software/autoconf automake https://www.gnu.org/software/automake/ autotrace http://autotrace.sourceforge.net awscli https://aws.amazon.com/cli/ : そこそこ便利。 背景 Homebrewは、OSX界じゃあ</description>
    </item>
    
    <item>
      <title>go で AggregationException(.NET)的なことをする</title>
      <link>https://kyoh86.work/posts/2015-12-24_10-53-07/</link>
      <pubDate>Thu, 24 Dec 2015 10:53:07 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2015-12-24_10-53-07/</guid>
      <description>おはようございます。皆さん、せい・・聖夜は如何お過ごしの予定でしょうか。 さてさて、Goのエラー処理についてはやいやい言われていますね。 エラー</description>
    </item>
    
    <item>
      <title>gopkg.in絡みで困ることになる・・・のかもしれない？？</title>
      <link>https://kyoh86.work/posts/2015-12-18_17-55-22/</link>
      <pubDate>Fri, 18 Dec 2015 17:55:22 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2015-12-18_17-55-22/</guid>
      <description>gopkg.in便利ね gopkg.in便利なんですが、何かのトラブルの種になっている気配があるので起稿。 詳細については未調査につき、何らかの</description>
    </item>
    
    <item>
      <title>GitHubのPullRequest一覧イマイチ使いづらくね？→捗るツール作ったった</title>
      <link>https://kyoh86.work/posts/2015-12-17_00-03-03/</link>
      <pubDate>Thu, 17 Dec 2015 00:03:03 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2015-12-17_00-03-03/</guid>
      <description>tl;dr Require status checks to pass before merging to master デプロイはjenkinsおじさんをひっぱたくだけのかんたんなお仕事 デプロイするときに、_このデプロイで何が変わるのか_を</description>
    </item>
    
    <item>
      <title>簡易リバースプロキシ「ichigo」でWebアプリ開発が捗る話</title>
      <link>https://kyoh86.work/posts/2015-12-07_02-30-43/</link>
      <pubDate>Mon, 07 Dec 2015 02:30:43 +0900</pubDate>
      
      <guid>https://kyoh86.work/posts/2015-12-07_02-30-43/</guid>
      <description>概要 自社サービスの開発中、必要にかられてGOで簡単なリバースプロキシツールを作った話を書いてみます。 前提 自社サービスの開発を、次のような構成</description>
    </item>
    
  </channel>
</rss>